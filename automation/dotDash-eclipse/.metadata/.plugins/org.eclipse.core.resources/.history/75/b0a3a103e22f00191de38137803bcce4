import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class SignUpPage extends Accessories{
	private WebDriver chromeWebDriver;
	
	private WebElement joinIndButton;
	private WebElement firstNameTextField;
	private WebElement lastNameTextField;
	private WebElement emailTextField;
	private WebElement passwordTextField;
	private WebElement termsCheckBox;
	private WebElement registerButton;
	
	public SignUpPage(WebDriver webDriver) throws Exception {
		chromeWebDriver = webDriver;
		
		writeReportHeader();
		
		loadPageInitElements();
		
		testFirstNameTextField();
		
		testLastNameTextField();
		
//		testDeleteFieldText();
		
		
	}
	
	private void loadMainPage() {
		// Load main page
		chromeWebDriver.get(url);

		// Wait for page to load
		chromeWebDriver.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);
		
		// Init Join as an individual Button
		joinIndButton = findWebElementInList(chromeWebDriver, "button", "", "JOIN AS AN INDIVIDUAL", true);
		
		// Click on JOIN AS AN INDIVIDUAL Button
		clickOnWebElement(chromeWebDriver, joinIndButton);
	}
	
	private void loadPageInitElements() {
		loadMainPage();
		
		// Init text fields
		firstNameTextField = chromeWebDriver.findElement(By.name("firstName"));
		lastNameTextField = chromeWebDriver.findElement(By.name("lastName"));
		emailTextField = chromeWebDriver.findElement(By.name("email"));
		passwordTextField = chromeWebDriver.findElement(By.name("password"));
		firstNameTextField = chromeWebDriver.findElement(By.name("firstName"));
		
		// Init Terms CheckBox 
		termsCheckBox = findWebElementInList(chromeWebDriver, "input", "type", "checkbox", false);
		
		// Init Register Button
		registerButton = findWebElementInList(chromeWebDriver, "button", "", "REGISTER", true);	
		
	}
	
	
	private void testFirstNameTextField() throws Exception {
		String errorPrompt = "Please enter a valid first name";

		IndividualProfile profile = IndividualProfile.getInstance();
		profile.clearProfile();
		fillProfile(profile);
		
		// Test Case: 1.1 (FirstName 1 character only) +
		profile.setFirstName("A");
		testTextFields(profile, "TC1.1", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.2 (FirstName 2+ characters only) +
		profile.setFirstName("Ab");
		testTextFields(profile, "TC1.2", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.3 (FirstName Many characters) +
		profile.setFirstName("Abraham");
		testTextFields(profile, "TC1.3", errorPrompt, profile.isFirstNameValid());
		
		// Negative testing
		// Test Case: 1.4 (FirstName "" (empty) no character at all) -
		profile.setFirstName("");
		negativeTestTextFields(profile, "TC1.4", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.5 (FirstName " " (space) character only) -
		profile.setFirstName(" ");
		negativeTestTextFields(profile, "TC1.5", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.6 (FirstName "1" (Numeric) character only) -
		profile.setFirstName("1");
		negativeTestTextFields(profile, "TC1.6", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.7 (FirstName "12" (Numeric) 2 numeric characters) -
		profile.setFirstName("12");
		negativeTestTextFields(profile, "TC1.7", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.8 (FirstName "Abraham1" (Alpha-numeric) characters) -
		profile.setFirstName("Abraham1");
		negativeTestTextFields(profile, "TC1.8", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.9 (FirstName "&" 1 (Special character) only) -
		profile.setFirstName("&");
		negativeTestTextFields(profile, "TC1.9", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.10 (FirstName "&!" 2 (Special characters)) -
		profile.setFirstName("&!");
		negativeTestTextFields(profile, "TC1.10", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.11 (FirstName "&!&*()" many (Special characters)) -
		profile.setFirstName("&!&*()");
		negativeTestTextFields(profile, "TC1.11", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.12 (FirstName "Abraham1*"  (alpha-numeric and special characters)) -
		profile.setFirstName("Abraham1*");
		negativeTestTextFields(profile, "TC1.12", errorPrompt, profile.isFirstNameValid());
		
	}
	
	private void testLastNameTextField() throws Exception {

		
		String errorPrompt = "Please enter a valid last name";

		IndividualProfile profile = IndividualProfile.getInstance();
		profile.clearProfile();
		fillProfile(profile);
		
		// Test Case: 1.13 (LastName 1 character only) +
		profile.setLastName("A");
		testTextFields(profile, "TC1.13", errorPrompt, profile.isFirstNameValid());

		// Test Case: 1.14 (LastName 2+ characters only) +
		profile.setLastName("Ab");
		testTextFields(profile, "TC1.14", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.15 (LastName Many characters) +
		profile.setLastName("Abraham");
		testTextFields(profile, "TC1.15", errorPrompt, profile.isFirstNameValid());
		
		// Negative testing
		// Test Case: 1.16 (LastName "" (empty) no character at all) -
		profile.setLastName("");
		negativeTestTextFields(profile, "TC1.16", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.17 (LastName " " (space) character only) -
		profile.setLastName(" ");
		negativeTestTextFields(profile, "TC1.17", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.18 (LastName "1" (Numeric) character only) -
		profile.setLastName("1");
		negativeTestTextFields(profile, "TC1.18", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.19 (LastName "12" (Numeric) 2 numeric characters) -
		profile.setLastName("12");
		negativeTestTextFields(profile, "TC1.19", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.20 (LastName "Abraham1" (Alpha-numeric) characters) -
		profile.setLastName("Abraham1");
		negativeTestTextFields(profile, "TC1.20", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.21 (LastName "&" 1 (Special character) only) -
		profile.setLastName("&");
		negativeTestTextFields(profile, "TC1.21", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.22 (LastName "&!" 2 (Special characters)) -
		profile.setLastName("&!");
		negativeTestTextFields(profile, "TC1.22", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.23 (LastName "&!&*()" many (Special characters)) -
		profile.setLastName("&!&*()");
		negativeTestTextFields(profile, "TC1.23", errorPrompt, profile.isFirstNameValid());
		
		// Test Case: 1.24 (LastName "Abraham1*"  (alpha-numeric and special characters)) -
		profile.setLastName("Abraham1*");
		negativeTestTextFields(profile, "TC1.24", errorPrompt, profile.isFirstNameValid());
		
		chromeWebDriver.close();
	}
	/**
	 * 
	 * @throws Exception 
	 */
	private void testTextFields(IndividualProfile profile, String TC, String errorPrompt, boolean isProfileAttValid) throws Exception {
		// Get current time for a file name
		String fileName = getTimeForFileName();
		
		// Init status
		String status = "";
		
		// Fill profile inputs
		fillProfile(profile);
		
		// Click on Body to loose focus
		clickOnWebElement(chromeWebDriver, chromeWebDriver.findElement(By.tagName("body")));
		
		if (findWebElementInList(chromeWebDriver, "div", "", errorPrompt, true) != null // Check if error prompt was populated
				&& !isProfileAttValid ) { // Is firstName is a valid name
			status = "Failed"; // Failed
		} else {
			status = "Passed"; // Passed
		}
		
		// Write report to the file
		writeToFile(new String[] { TC, status, fileName });
		
		// Take a screen shot
		takeFullScreenShot(chromeWebDriver, "Test-results/" + TC + "/" +TC + "-" + fileName);
	}
	
	private void negativeTestTextFields(IndividualProfile profile, String TC, String errorPrompt, boolean isProfileAttValid) throws Exception {
		// Get current time for a file name
		String fileName = getTimeForFileName();
		
		// Init status
		String status = "";
		
		// Fill profile inputs
		fillProfile(profile);
		
		// Click on Body to loose focus
		clickOnWebElement(chromeWebDriver, chromeWebDriver.findElement(By.tagName("body")));
		
		if (findWebElementInList(chromeWebDriver, "div", "", errorPrompt, true) != null // Check if error prompt was populated
				&& !isProfileAttValid ) { // Is firstName is a valid name
			status = "Passed"; // Passed
		} else {
			status = "Failed"; // Failed
		}
		
		// Write report to the file
		writeToFile(new String[] { TC, status, fileName });
		
		// Take a screen shot
		takeFullScreenShot(chromeWebDriver, "Test-results/" + TC + "/" +TC + "-" + fileName);
	}
	
	/**
	 * This method fills profile registration with given profile
	 * @param profile - IndividualProfile
	 */
	private void fillProfile(IndividualProfile profile) {
		clearTextField(chromeWebDriver, firstNameTextField);
		inputTextWebElement(chromeWebDriver, firstNameTextField, profile.getFirstName());
		
		clearTextField(chromeWebDriver, lastNameTextField);
		inputTextWebElement(chromeWebDriver, lastNameTextField, profile.getLastName());
		
		clearTextField(chromeWebDriver, emailTextField);
		inputTextWebElement(chromeWebDriver, emailTextField, profile.getEmail());
		
		clearTextField(chromeWebDriver, passwordTextField);
		inputTextWebElement(chromeWebDriver, passwordTextField, profile.getPassword());
		
		if (termsCheckBox.isSelected() != profile.getTerms()) {
			clickOnWebElement(chromeWebDriver, termsCheckBox);
		}
	}
}
